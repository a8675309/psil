// Core
program = { SOI ~ expr_list? ~ EOI }
expr_list = { expr+ }
expr = { atom | special_form | invocation }
atom = { number | boolean | string | void | lambda | name }
special_form = { if_form | cond | define | do_form | and | or }
invocation = { "(" ~ name ~ expr_list? ~ ")" }

// Special forms
// (cannot use Rust keywords as rule names)
if_form = { "(" ~ "if" ~ expr ~ expr ~ expr ~ ")" }
cond = { "(" ~ "cond" ~ (expr ~ expr)+ ~ ")" }
define = { "(" ~ "define" ~ name ~ expr ~ ")" }
do_form = { "(" ~ "do" ~ expr_list? ~ ")" }
and = { "(" ~ "and" ~ expr_list ~ ")" }
or = { "(" ~ "or" ~ expr_list ~ ")" }

// Atoms
number = @{ ("+" | "-")? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
boolean = @{ "true" | "false" }
string = ${ "\"" ~ string_inner ~ "\"" }
void = @{ "void" }
lambda = { "{"  ~ params? ~ expr ~ "}" }
params = { "|" ~ name+ ~ "|"}
name = @{ !reserved_words ~ char+ } // this is intentionally quite inclusive
reserved_words = { "if" | "cond" | "define" | "do" | "and" | "or" | "true" | "false" | "void" }

char = { "!" | '#'..'&' | '*'..'Z' | '^'..'_' | 'a'..'z' }
string_inner = @{ string_char* }
string_char = { !("\"" | "\\") ~ ANY }

WHITESPACE = _{ " " | "\t" | "\n" | "\r" | "\r\n" }
COMMENT = _{ ";" ~ (!NEWLINE ~ ANY)* ~ NEWLINE}
